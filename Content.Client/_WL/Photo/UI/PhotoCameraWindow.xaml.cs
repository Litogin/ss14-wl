using Content.Client.UserInterface.Controls;
using Robust.Client.AutoGenerated;
using Robust.Client.Graphics;
using Robust.Client.ResourceManagement;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Graphics;
using Robust.Shared.Input;
using Robust.Shared.Prototypes;
using Robust.Shared.Utility;
using SixLabors.ImageSharp;
using System.IO;
using System.Numerics;

namespace Content.Client._WL.Photo.UI;

[GenerateTypedNameReferences]
public sealed partial class PhotoCameraWindow : FancyWindow
{
    [Dependency] private readonly IResourceCache _cache = default!;

    private static readonly ProtoId<ShaderPrototype> PhotoShader = "CameraStatic";

    public Vector2 MoveInput = Vector2.Zero;
    public float ZoomInput = 0;

    public event Action? OnTakeImageAttempt;

    public PhotoCameraWindow()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);

        CameraView.ViewportSize = new Vector2i(250, 250);

        PhotoButton.BaseTexture = new SpriteSpecifier.Texture(new("/Textures/_WL/Interface/Misc/Photo/button_base.png"));
        PhotoButton.PointedTexture = new SpriteSpecifier.Texture(new("/Textures/_WL/Interface/Misc/Photo/button_highlight.png"));
        PhotoButton.PressedTexture = new SpriteSpecifier.Texture(new("/Textures/_WL/Interface/Misc/Photo/button_pressed.png"));
        PhotoButton.ShowBase();

        if (_cache.TryGetResource("/Audio/Items/Stamp/automatic_stamp.ogg", out AudioResource? resource))
            PhotoButton.ClickSound = resource;

        PhotoButton.OnPressed += args =>
        {
            OnTakeImageAttempt?.Invoke();
        };
    }

    //region Control
    protected override void MouseWheel(GUIMouseWheelEventArgs args)
    {
        base.MouseWheel(args);

        ZoomInput = args.Delta.Y;
    }

    protected override void KeyBindDown(GUIBoundKeyEventArgs args)
    {
        base.KeyBindDown(args);

        HandleMoveKey(args.Function, 1);
    }

    protected override void KeyBindUp(GUIBoundKeyEventArgs args)
    {
        base.KeyBindUp(args);

        HandleMoveKey(args.Function, -1);
    }

    private void HandleMoveKey(BoundKeyFunction function, float delta)
    {
        if (function == EngineKeyFunctions.MoveUp)
            MoveInput.Y = MoveInput.Y + delta;
        if (function == EngineKeyFunctions.MoveDown)
            MoveInput.Y = MoveInput.Y - delta;
        if (function == EngineKeyFunctions.MoveRight)
            MoveInput.X = MoveInput.X + delta;
        if (function == EngineKeyFunctions.MoveLeft)
            MoveInput.X = MoveInput.X - delta;
    }
    //endregion Control

    public void UpdateState(IEye? eye, bool hasPaper)
    {
        SetCameraView(eye);

        PaperIndicator.TexturePath = "/Textures/_WL/Interface/Misc/Photo/paper_" + (hasPaper ? "on.png" : "off.png");
    }

    private void SetCameraView(IEye? eye)
    {
        CameraView.Eye = eye;
    }

    public void RenderImage(Action<byte[]> callback)
    {
        CameraView.Screenshot(image =>
        {
            using var data = new MemoryStream();

            image.SaveAsPng(data);
            var bytes = data.ToArray();

            image.Dispose();

            callback(bytes);
        });
    }

    public void OnDispose()
    {
        // Dispose sound source
        PhotoButton.ClickSound = null;
    }
}
