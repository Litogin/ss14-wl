using Robust.Client.AutoGenerated;
using Robust.Client.Graphics;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using System.IO;
using System.Numerics;

namespace Content.Client._WL.Photo.UI;

[GenerateTypedNameReferences]
public sealed partial class PhotoCardWindow : BaseWindow
{
    private const int DRAG_MARGIN_SIZE = 16;

    private DragMode _allowedResizeModes = ~DragMode.None;

    public PhotoCardWindow()
    {
        IoCManager.InjectDependencies(this);
        RobustXamlLoader.Load(this);

        CloseButton.OnPressed += _ => Close();
    }

    public void ShowImage(byte[] imageData)
    {
        try
        {
            MemoryStream stream = new MemoryStream(imageData);
            ImageDislay.Texture = Texture.LoadFromPNGStream(stream);
        }
        catch { }
    }

    protected override DragMode GetDragModeFor(Vector2 relativeMousePos)
    {
        var mode = DragMode.None;

        // Be quite generous with resize margins:
        if (relativeMousePos.Y < DRAG_MARGIN_SIZE)
        {
            mode |= DragMode.Top;
        }
        else if (relativeMousePos.Y > Size.Y - DRAG_MARGIN_SIZE)
        {
            mode |= DragMode.Bottom;
        }

        if (relativeMousePos.X < DRAG_MARGIN_SIZE)
        {
            mode |= DragMode.Left;
        }
        else if (relativeMousePos.X > Size.X - DRAG_MARGIN_SIZE)
        {
            mode |= DragMode.Right;
        }

        if ((mode & _allowedResizeModes) == DragMode.None)
        {
            return DragMode.Move;
        }
        return mode & _allowedResizeModes;
    }
}

