using Robust.Client.Audio;
using Robust.Client.AutoGenerated;
using Robust.Client.ResourceManagement;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Audio.Sources;
using Robust.Shared.Utility;
using System.Numerics;

namespace Content.Client._WL.Photo.UI;

[GenerateTypedNameReferences]
public sealed partial class TextureButton : ContainerButton
{
    [Dependency] private readonly IAudioManager _audioManager = default!;

    public TextureButton()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);

        Icon.DisplayRect.Stretch = TextureRect.StretchMode.Scale;

        this.OnMouseEntered += args =>
        {
            if (PointedTexture != null)
                Icon.SetFromSpriteSpecifier(PointedTexture);
        };

        this.OnMouseExited += args =>
        {
            if (BaseTexture != null)
                Icon.SetFromSpriteSpecifier(BaseTexture);
        };

        this.OnButtonDown += args =>
        {
            if (PressedTexture != null)
                Icon.SetFromSpriteSpecifier(PressedTexture);

            _clickSound?.Restart();
        };

        this.OnButtonUp += args =>
        {
            if (PointedTexture != null)
                Icon.SetFromSpriteSpecifier(PointedTexture);
        };
    }

    public void ShowBase()
    {
        if (BaseTexture != null)
            Icon.SetFromSpriteSpecifier(BaseTexture);
    }

    public Vector2 TextureScale
    {
        get => Icon.DisplayRect.TextureSizeTarget;
        set => Icon.DisplayRect.SetSize = value;
    }

    public SpriteSpecifier? BaseTexture;
    public SpriteSpecifier? PointedTexture;
    public SpriteSpecifier? PressedTexture;

    public AudioResource? ClickSound
    {
        set
        {
            if (_clickSound != null)
                _clickSound.Dispose();

            if (value == null)
                return;

            var source = _audioManager.CreateAudioSource(value);
            if (source == null)
                return;

            source.Global = true;
            _clickSound = source;
        }
    }
    private IAudioSource? _clickSound;
}
