using Content.Client.Stylesheets;
using Content.Shared._WL.Skills;
using Robust.Client.AutoGenerated;
using Robust.Client.Graphics;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;

namespace Content.Client._WL.Skills.Ui;

[GenerateTypedNameReferences]
public sealed partial class SkillSelector : Control
{
    public Action<int>? OnSkillLevelChanged;

    private readonly int[] _costs;
    private int _currentLevel;
    private int _defaultLevel;
    private bool _isLocked;

    private readonly bool _upgradeOnly;

    public bool IsLocked
    {
        get => _isLocked;
        set
        {
            _isLocked = value;
            UpdateUI();
        }
    }

    public SkillSelector(SkillType skillType, int currentLevel, int[] costs, Color skillColor,
        int defaultLevel = 1, bool upgradeOnly = false)
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);

        _currentLevel = currentLevel;
        _costs = costs;
        _defaultLevel = defaultLevel;

        _upgradeOnly = upgradeOnly;

        ColorPanel.PanelOverride = new StyleBoxFlat
        {
            BackgroundColor = skillColor,
            ContentMarginTopOverride = 0,
            ContentMarginBottomOverride = 0,
            ContentMarginLeftOverride = 0,
            ContentMarginRightOverride = 0
        };

        UpdateButtonTexts();
        SetupTooltips(skillType);

        SkillNameLabel.Text = Loc.GetString($"skill-{skillType.ToString().ToLower()}");
        SkillDescriptionLabel.Text = Loc.GetString($"skill-{skillType.ToString().ToLower()}-desc");

        UpdateUI();

        Level1Button.OnPressed += _ => SetLevel(1);
        Level2Button.OnPressed += _ => SetLevel(2);
        Level3Button.OnPressed += _ => SetLevel(3);
        Level4Button.OnPressed += _ => SetLevel(4);

        if (_upgradeOnly)
        {
            Level1Button.Disabled = true;
            Level2Button.Disabled = currentLevel <= 2;
            Level3Button.Disabled = currentLevel <= 3;
            Level4Button.Disabled = currentLevel <= 4;
        }
    }

    private void UpdateButtonTexts()
    {
        Level1Button.Text = Loc.GetString("skill-level-1") + $" ({GetDisplayCost(0)})";
        Level2Button.Text = Loc.GetString("skill-level-2") + $" ({GetDisplayCost(1)})";
        Level3Button.Text = Loc.GetString("skill-level-3") + $" ({GetDisplayCost(2)})";
        Level4Button.Text = Loc.GetString("skill-level-4") + $" ({GetDisplayCost(3)})";
    }

    private string GetDisplayCost(int levelIndex)
    {
        var level = levelIndex + 1;
        if (level <= _defaultLevel)
            return "0";

        return _costs[levelIndex].ToString();
    }

    private void SetupTooltips(SkillType skillType)
    {
        SetButtonTooltip(Level1Button, skillType, 1);
        SetButtonTooltip(Level2Button, skillType, 2);
        SetButtonTooltip(Level3Button, skillType, 3);
        SetButtonTooltip(Level4Button, skillType, 4);
    }

    private void SetButtonTooltip(Button button, SkillType skillType, int level)
    {
        button.ToolTip = Loc.GetString($"skill-{skillType.ToString().ToLower()}-level-{level}-desc");
    }

    public void UpdateAvailability(int unspentPoints, SharedSkillsSystem skillsSystem)
    {
        if (_isLocked)
            return;

        for (int targetLevel = 1; targetLevel <= 4; targetLevel++)
        {
            var button = GetLevelButton(targetLevel);
            if (button == null) continue;

            if (targetLevel <= _currentLevel)
            {
                button.Disabled = false;
                continue;
            }

            var upgradeCost = CalculateTotalUpgradeCost(_currentLevel, targetLevel);
            button.Disabled = unspentPoints < upgradeCost;
        }

        UpdateLevelButtonsAppearance();
    }

    private int CalculateTotalUpgradeCost(int fromLevel, int toLevel)
    {
        var totalCost = 0;
        for (int level = fromLevel; level < toLevel; level++)
        {
            if (level >= _defaultLevel && level < _costs.Length)
                totalCost += _costs[level];
        }
        return totalCost;
    }

    public int GetPaidSpentCost()
    {
        if (_currentLevel <= _defaultLevel)
            return 0;

        return CalculateTotalUpgradeCost(_defaultLevel, _currentLevel);
    }

    private Button? GetLevelButton(int level)
    {
        return level switch
        {
            1 => Level1Button,
            2 => Level2Button,
            3 => Level3Button,
            4 => Level4Button,
            _ => null
        };
    }

    private void UpdateUI()
    {
        UpdateLevelButtons();
        UpdateLevelButtonsAppearance();

        var paidSpent = GetPaidSpentCost();
        if (paidSpent > 0)
        {
            SkillCostLabel.Text = Loc.GetString("skill-total-cost", ("cost", paidSpent));
        }
        else if (_currentLevel > _defaultLevel)
        {
            SkillCostLabel.Text = Loc.GetString("skill-free-upgraded");
        }
        else
        {
            SkillCostLabel.Text = Loc.GetString("skill-free-default");
        }

        if (_isLocked)
        {
            SkillNameLabel.Modulate = Color.Gray;
            SkillDescriptionLabel.Modulate = Color.Gray;
            SkillCostLabel.Modulate = Color.Gray;
            SkillCostLabel.Text = Loc.GetString("skill-locked-default");
        }
        else
        {
            SkillNameLabel.Modulate = Color.White;
            SkillDescriptionLabel.Modulate = Color.LightGray;
            SkillCostLabel.Modulate = Color.LightGray;
        }
    }

    private void UpdateLevelButtons()
    {
        Level1Button.Pressed = _currentLevel >= 1;
        Level2Button.Pressed = _currentLevel >= 2;
        Level3Button.Pressed = _currentLevel >= 3;
        Level4Button.Pressed = _currentLevel >= 4;

        Level1Button.StyleClasses.Add(StyleNano.ButtonOpenRight);
        Level2Button.StyleClasses.Add(StyleNano.ButtonOpenBoth);
        Level3Button.StyleClasses.Add(StyleNano.ButtonOpenBoth);
        Level4Button.StyleClasses.Add(StyleNano.ButtonOpenLeft);
    }

    private void UpdateLevelButtonsAppearance()
    {
        for (int level = 1; level <= 4; level++)
        {
            var button = GetLevelButton(level);
            if (button == null) continue;

            button.RemoveStyleClass("SkillLevelDefault");
            button.RemoveStyleClass("SkillLevelUpgraded");
            button.RemoveStyleClass("SkillLevelNormal");
            button.RemoveStyleClass("SkillLevelDefaultHover");
            button.RemoveStyleClass("SkillLevelDefaultPressed");
            button.RemoveStyleClass("SkillLevelUpgradedHover");
            button.RemoveStyleClass("SkillLevelUpgradedPressed");
            button.RemoveStyleClass("SkillLevelNormalHover");
            button.RemoveStyleClass("SkillLevelNormalPressed");

            if (button.Disabled)
            {
                continue;
            }
            else if (level <= _defaultLevel)
            {
                button.AddStyleClass("SkillLevelDefault");
                button.AddStyleClass("SkillLevelDefaultHover");
                button.AddStyleClass("SkillLevelDefaultPressed");
            }
            else if (level <= _currentLevel)
            {
                button.AddStyleClass("SkillLevelUpgraded");
                button.AddStyleClass("SkillLevelUpgradedHover");
                button.AddStyleClass("SkillLevelUpgradedPressed");
            }
            else
            {
                button.AddStyleClass("SkillLevelNormal");
                button.AddStyleClass("SkillLevelNormalHover");
                button.AddStyleClass("SkillLevelNormalPressed");
            }
        }
    }

    public void SetLevel(int level)
    {
        if (level == _currentLevel || _isLocked)
            return;

        if (_upgradeOnly && level < _currentLevel)
            return;

        _currentLevel = level;
        UpdateUI();
        OnSkillLevelChanged?.Invoke(level);
    }
}
