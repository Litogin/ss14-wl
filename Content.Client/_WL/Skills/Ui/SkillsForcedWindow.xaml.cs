using Content.Client.UserInterface.Controls;
using Content.Shared._WL.Skills;
using Content.Shared._WL.Skills.UI;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;

namespace Content.Client._WL.Skills.Ui;

[GenerateTypedNameReferences]
public sealed partial class SkillsForcedWindow : FancyWindow
{
    [Dependency] private readonly IEntityManager _entMan = default!;
    private readonly SharedSkillsSystem _skillsSystem;

    public event Action<string, byte, int>? OnSkillChanged;

    private string _jobId = string.Empty;
    private Dictionary<byte, int> _currentSkills = new();
    private Dictionary<byte, int> _defaultSkills = new();
    private int _totalPoints;
    private int _spentPoints;

    public SkillsForcedWindow()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);

        _skillsSystem = _entMan.System<SharedSkillsSystem>();
    }

    public void UpdateState(SkillsEuiState state)
    {
        _jobId = state.JobId;
        _currentSkills = new Dictionary<byte, int>(state.CurrentSkills);
        _defaultSkills = new Dictionary<byte, int>(state.DefaultSkills);
        _totalPoints = state.TotalPoints;
        _spentPoints = state.SpentPoints;

        UpdateWindow();
    }

    private void UpdateWindow()
    {
        SkillsContainer.RemoveAllChildren();

        var pointsLabel = new Label
        {
            Text = $"{_totalPoints - _spentPoints} / {_totalPoints}",
            HorizontalAlignment = Control.HAlignment.Center,
            Margin = new Thickness(0, 0, 0, 10)
        };
        SkillsContainer.AddChild(pointsLabel);

        var warningLabel = new Label
        {
            Text = Loc.GetString("skills-forced-warning"),
            StyleClasses = { "LabelSubText" },
            HorizontalAlignment = Control.HAlignment.Center,
            Margin = new Thickness(0, 0, 0, 20)
        };
        SkillsContainer.AddChild(warningLabel);

        var scrollContainer = new ScrollContainer
        {
            VerticalExpand = true
        };
        var skillsList = new BoxContainer
        {
            Orientation = BoxContainer.LayoutOrientation.Vertical,
            HorizontalExpand = true
        };
        scrollContainer.AddChild(skillsList);

        PopulateSkillsList(skillsList);
        SkillsContainer.AddChild(scrollContainer);

        var bottomContainer = new BoxContainer
        {
            Orientation = BoxContainer.LayoutOrientation.Vertical,
            HorizontalAlignment = Control.HAlignment.Center,
            Margin = new Thickness(0, 20, 0, 0)
        };

        var confirmButton = new Button
        {
            Text = Loc.GetString("skills-confirm-button"),
            HorizontalAlignment = Control.HAlignment.Center
        };

        var warningContainer = new BoxContainer
        {
            Orientation = BoxContainer.LayoutOrientation.Vertical,
            HorizontalAlignment = Control.HAlignment.Center
        };

        confirmButton.OnPressed += _ =>
        {
            if (_totalPoints - _spentPoints == 0)
            {
                Close();
            }
            else
            {
                warningContainer.RemoveAllChildren();
                var warning = new Label
                {
                    Text = Loc.GetString("skills-unspent-warning"),
                    FontColorOverride = Color.Yellow,
                    HorizontalAlignment = Control.HAlignment.Center
                };
                warningContainer.AddChild(warning);
            }
        };

        bottomContainer.AddChild(confirmButton);
        bottomContainer.AddChild(warningContainer);
        SkillsContainer.AddChild(bottomContainer);
    }

    private void PopulateSkillsList(BoxContainer skillsList)
    {
        var unspentPoints = _totalPoints - _spentPoints;
        foreach (var skillType in Enum.GetValues<SkillType>())
        {
            var costs = _skillsSystem.GetSkillCost(skillType);
            var color = _skillsSystem.GetSkillColor(skillType);
            byte skillKey = (byte)skillType;

            var defaultLevel = _defaultSkills.GetValueOrDefault(skillKey, 1);
            var currentLevel = _currentSkills.GetValueOrDefault(skillKey, defaultLevel);

            var skillSelector = new SkillSelector(skillType, currentLevel, costs, color, defaultLevel)
            {
                Margin = new Thickness(0, 5)
            };

            skillSelector.IsLocked = defaultLevel == 4;

            skillSelector.UpdateAvailability(unspentPoints, _skillsSystem);

            skillSelector.OnSkillLevelChanged += (newLevel) =>
            {
                if (newLevel < defaultLevel)
                {
                    skillSelector.SetLevel(currentLevel);
                    return;
                }

                _currentSkills[skillKey] = newLevel;
                OnSkillChanged?.Invoke(_jobId, skillKey, newLevel);

                _spentPoints = CalculateTotalSpentPoints();
                UpdateWindow();
            };

            skillsList.AddChild(skillSelector);
        }
    }

    private int CalculateTotalSpentPoints()
    {
        var totalSpent = 0;

        foreach (var (skillKey, level) in _currentSkills)
        {
            var skillType = (SkillType)skillKey;
            var costs = _skillsSystem.GetSkillCost(skillType);
            var defaultLevel = _defaultSkills.GetValueOrDefault(skillKey, 1);

            for (int currentLevel = defaultLevel; currentLevel < level; currentLevel++)
            {
                if (currentLevel < costs.Length)
                    totalSpent += costs[currentLevel];
            }
        }

        return totalSpent;
    }
}
