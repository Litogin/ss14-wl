using System.Linq;
using Content.Client.UserInterface.Controls;
using Content.Shared._WL.Skills;
using Robust.Client.AutoGenerated;
using Robust.Client.Graphics;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;

namespace Content.Client._WL.Skills.Ui;

[GenerateTypedNameReferences]
public sealed partial class SkillsWindow : FancyWindow
{
    [Dependency] private readonly IEntityManager _entMan = default!;
    private readonly SharedSkillsSystem _skillsSystem;

    public event Action<string, byte, int>? OnSkillChanged;

    private readonly string _jobId;
    private readonly Dictionary<byte, int> _currentSkills;
    private readonly Dictionary<byte, int> _defaultSkills;
    private readonly bool _upgradeOnly;
    private readonly int _totalPoints;
    private int _spentPoints;

    private readonly Color _rowColor1 = Color.FromHex("#1B1B1E");
    private readonly Color _rowColor2 = Color.FromHex("#202025");
    private int _rowCount = 0;

    public SkillsWindow(
        string jobId,
        Dictionary<byte, int> currentSkills,
        Dictionary<byte, int> defaultSkills,
        int totalPoints, bool upgradeOnly = false)
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);

        _skillsSystem = _entMan.System<SharedSkillsSystem>();

        _jobId = jobId;
        _currentSkills = new Dictionary<byte, int>(currentSkills);
        _defaultSkills = new Dictionary<byte, int>(defaultSkills);
        _upgradeOnly = upgradeOnly;
        _totalPoints = totalPoints;
        _spentPoints = 0;

        PopulateSkills();
        UpdatePoints();
    }

    private void PopulateSkills()
    {
        SkillsList.DisposeAllChildren();
        _rowCount = 0;
        foreach (var skillType in Enum.GetValues<SkillType>())
        {
            var costs = _skillsSystem.GetSkillCost(skillType);
            var color = _skillsSystem.GetSkillColor(skillType);
            byte skillKey = (byte)skillType;

            var defaultLevel = _defaultSkills.GetValueOrDefault(skillKey, 1);
            var currentLevel = _currentSkills.GetValueOrDefault(skillKey, defaultLevel);

            var skillSelector = new SkillSelector(skillType, currentLevel, costs, color, defaultLevel, _upgradeOnly)
            {
                IsLocked = _upgradeOnly && defaultLevel == 4
            };

            skillSelector.OnSkillLevelChanged += (newLevel) =>
            {
                if (newLevel < defaultLevel)
                {
                    skillSelector.SetLevel(currentLevel);
                    return;
                }

                _currentSkills[skillKey] = newLevel;
                OnSkillChanged?.Invoke(_jobId, skillKey, newLevel);
                UpdatePoints();
            };

            var rowContainer = CreateSkillRow(skillSelector);
            SkillsList.AddChild(rowContainer);

            _rowCount++;
        }
    }

    private PanelContainer CreateSkillRow(SkillSelector skillSelector)
    {
        var currentRowColor = (_rowCount % 2 == 0) ? _rowColor1 : _rowColor2;

        return new PanelContainer
        {
            PanelOverride = new StyleBoxFlat
            {
                BackgroundColor = currentRowColor,
                ContentMarginTopOverride = 2,
                ContentMarginBottomOverride = 2,
                ContentMarginLeftOverride = 4,
                ContentMarginRightOverride = 4
            },
            Children = { skillSelector }
        };
    }

    private void UpdatePoints()
    {
        _spentPoints = CalculateTotalSpentPoints();
        var unspentPoints = _totalPoints - _spentPoints;

        PointsLabel.Text = $" {unspentPoints} / {_totalPoints}";

        UpdateSkillAvailability(unspentPoints);
    }

    private int CalculateTotalSpentPoints()
    {
        var totalSpent = 0;

        foreach (var (skillKey, level) in _currentSkills)
        {
            var skillType = (SkillType)skillKey;
            var costs = _skillsSystem.GetSkillCost(skillType);
            var defaultLevel = _defaultSkills.GetValueOrDefault(skillKey, 1);

            for (int currentLevel = defaultLevel; currentLevel < level; currentLevel++)
            {
                if (currentLevel < costs.Length)
                    totalSpent += costs[currentLevel];
            }
        }

        return totalSpent;
    }

    private void UpdateSkillAvailability(int unspentPoints)
    {
        foreach (var child in SkillsList.Children)
        {
            if (child is PanelContainer panel && panel.ChildCount > 0)
            {
                if (panel.Children.ElementAt(0) is SkillSelector selector)
                {
                    selector.UpdateAvailability(unspentPoints, _skillsSystem);
                }
            }
        }
    }
}
